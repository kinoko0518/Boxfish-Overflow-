name: Rust Build

on:
  push:
    branches: ["main"]
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: ["main"]

# 環境変数を設定
env:
  CARGO_TERM_COLOR: always
  CRATE_NAME: boxfishoverflow
  ARTIFACT_FILENAME: Boxfish-Overflow!-${{ github.sha_short }}

jobs:
  build:
    # strategy.matrix を使って各OSでジョブを実行
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # 1. リポジトリのコードをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Rustの安定版ツールチェーンをセットアップ
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # 3. BevyのOS依存関係をインストール (Linuxのみ)
      - name: Install Bevy dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libx11-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libvulkan-dev \
            libasound2-dev \
            libudev-dev \
            pkg-config

      # 4. Cargoの依存関係をキャッシュしてビルドを高速化
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # 5. プロジェクトをビルド
      - name: Build
        run: cargo build --release --verbose

      # 6. ビルドされた実行ファイルをアーティファクトとしてアップロード
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # アーティファクト名をOSごとに設定
          name: ${{ env.ARTIFACT_FILENAME }}-${{ runner.os }}
          path: |
            target/release/${{ env.CRATE_NAME }}-${{ matrix.os }}
            target/release/${{ env.CRATE_NAME }}-${{ matrix.os }}.exe
          # 実行ファイルが見つからなくてもエラーにしない (OSによって拡張子の有無が違うため)
          if-no-files-found: ignore

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          generate_release_notes: true
